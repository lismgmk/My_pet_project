{"version":3,"sources":["a1-root/v3-Registration/Registration.module.css","app/App.module.css","a1-root/v1-Main/common/c1-SuperInputText/SuperInputText.module.css","a1-root/v1-Main/Main.module.css","a1-root/v1-Main/common/c2-SuperButton/SuperButton.module.css","a1-root/v1-Main/common/c3-SuperCheckbox/SuperCheckbox.module.css","a1-root/v4-Profile/Profile.module.css","a1-root/v5-Page_404/Page_404.module.css","reportWebVitals.ts","api/login-api/loginAPI.ts","a1-root/v3-Registration/registrationAPI.ts","a1-root/v3-Registration/registrationReduser.ts","api/auth-api/authAPI.ts","app/appReducer.ts","a1-root/v2-Login/loginReduser.ts","api/forgot-api/forgotAPI.ts","a1-root/v6-fogotPassword/forgotPasswordReduser.ts","a1-root/v7-setPassword/setPasswordReduser.ts","app/store.ts","a1-root/v1-Main/mainReduser.ts","a1-root/v4-Profile/profileReduser.ts","a1-root/v5-Page_404/pag404Reduser.ts","a1-root/v1-Main/common/c1-SuperInputText/SuperInputText.tsx","a1-root/v1-Main/common/c2-SuperButton/SuperButton.tsx","a1-root/v1-Main/common/c3-SuperCheckbox/SuperCheckbox.tsx","a1-root/v1-Main/Main.tsx","a1-root/v2-Login/Login.tsx","a1-root/v4-Profile/Profile.tsx","a1-root/v3-Registration/Registration.tsx","a1-root/v5-Page_404/Page404.tsx","image/preloader.gif","a1-root/v6-fogotPassword/ForgotPassword.tsx","a1-root/v6-fogotPassword/CheckEmail.tsx","a1-root/v7-setPassword/SetPassword.tsx","app/App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","loginAPI","data","post","registrationAPI","email","password","setIsRegistrationFetchingAC","isFetching","type","setRegistrationErrorAC","error","initState","isRegistered","authAPI","delete","initialState","status","isInitialized","actionsForApp","_id","avatar","isAdmin","name","publicCardPacksCount","rememberMe","verified","updated","created","isLoggedIn","actionsForLogin","setIsLoggedIn","value","updateUserData","getUser","forgotAPI","forgotPasswordError","actionsForPassword","setPasswordError","actionsForSetPassword","rootReducer","combineReducers","app","state","action","main","login","registration","profile","page404","forgotPassword","setPassword","store","createStore","applyMiddleware","thunk","window","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","className","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","input","errorInput","superInput","e","currentTarget","key","SuperButton","red","finalClassName","mainStyle","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","Main","useState","text","setText","showAlert","alert","setChecked","column","testSpanError","blue","onClick","disabled","Login","React","memo","setData","emailValid","passwordValid","formErrors","errors","setErrors","useSelector","dispatch","useDispatch","validate","test","length","to","PATH","PET_PROFILE","onSubmit","a","res","response","message","preventDefault","htmlFor","aria-required","onBlur","id","target","style","color","Profile","user","App","PET_LOGIN","Registration","useEffect","setEmail","confirmedPassword","setConfirmedPassword","history","useHistory","mainDiv","header","form","formField","push","cancelBtn","catch","err","finally","registerTC","registerBtn","Page404","ForgotPassword","from","pathname","PET_CHECK_EMAIL","position","top","textAlign","width","src","preloader","alt","console","log","placeholder","CheckEmail","mail","useLocation","SetPassword","resetPasswordToken","token","useParams","getPassword","appState","PET_MAIN","activeClassName","activeLink","PET_REGISTRATION","PET_PAGE404","PET_FORGOT_PASSWORD","PET_SET_PASSWORD","path","exact","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.016b3547.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainDiv\":\"Registration_mainDiv__2iGxb\",\"header\":\"Registration_header__2nNtV\",\"form\":\"Registration_form__2obV7\",\"error\":\"Registration_error__1w31g\",\"formField\":\"Registration_formField__2QZXR\",\"cancelBtn\":\"Registration_cancelBtn__eQxPY\",\"registerBtn\":\"Registration_registerBtn__2Ujc8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__12Ubl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__1cquU\",\"errorInput\":\"SuperInputText_errorInput__1IAjT\",\"error\":\"SuperInputText_error__3SMj9\",\"input\":\"SuperInputText_input__1W_3A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"Main_blue__tmsj9\",\"column\":\"Main_column__2K_xq\",\"testSpanError\":\"Main_testSpanError__2grtX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1Px0N\",\"mainStyle\":\"SuperButton_mainStyle__31Ag_\",\"move\":\"SuperButton_move__1BYrb\",\"red\":\"SuperButton_red__2cwi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__3NkIC\",\"spanClassName\":\"SuperCheckbox_spanClassName__3K4kp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Profile_App__2bOOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Page_404_App__3qaEl\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\n\r\n\r\n// instance\r\nexport const instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    // baseURL: \"http://localhost:7542/2.0/\",\r\n    withCredentials: true,\r\n});\r\n\r\n\r\n// api\r\nexport const loginAPI = {\r\n    login(data: LoginType) {\r\n        return instance.post<LoginResponseType>(\"auth/login\", data);\r\n    },\r\n};\r\n\r\n\r\n// types\r\nexport type LoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n};\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n};\r\ntype ErrorType = { error?: string };\r\nexport type LoginResponseType = UserDataType & ErrorType;","import {instance} from \"../../api/login-api/loginAPI\";\r\n\r\n\r\nexport const registrationAPI = {\r\n  register(email: string, password: string) {\r\n    return instance.post(\"auth/register\", {\r\n      email,\r\n      password,\r\n    });\r\n  },\r\n};\r\n","import { AxiosError } from \"axios\";\r\nimport { Dispatch } from \"redux\";\r\nimport { registrationAPI } from \"./registrationAPI\";\r\n\r\ntype InitStateType = typeof initState;\r\ntype ActionsType =\r\n  | ReturnType<typeof setIsRegisteredAC>\r\n  | ReturnType<typeof setRegistrationErrorAC>\r\n  | ReturnType<typeof setIsRegistrationFetchingAC>;\r\n\r\nexport const setIsRegisteredAC = (isRegistered: boolean) =>\r\n  ({\r\n    type: \"registration/SET-IS-REGISTERED\",\r\n    isRegistered,\r\n  } as const);\r\nexport const setIsRegistrationFetchingAC = (isFetching: boolean) =>\r\n  ({\r\n    type: \"registration/SET-IS-FETCHING\",\r\n    isFetching,\r\n  } as const);\r\nexport const setRegistrationErrorAC = (error: string) =>\r\n  ({\r\n    type: \"registration/SET-ERROR\",\r\n    error,\r\n  } as const);\r\n\r\nexport const registerTC = (email: string, password: string) => (\r\n  dispatch: Dispatch\r\n) => {\r\n  dispatch(setIsRegistrationFetchingAC(true));\r\n  registrationAPI\r\n    .register(email, password)\r\n    .then((res) => {\r\n      dispatch(setIsRegisteredAC(true));\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      dispatch(setRegistrationErrorAC(err.response?.data.error));\r\n    })\r\n    .finally(() => dispatch(setIsRegistrationFetchingAC(false)));\r\n};\r\n\r\nconst initState = {\r\n  isRegistered: false,\r\n  isFetching: false,\r\n  error: \"\",\r\n};\r\n\r\nexport const registrationReduser = (\r\n  state = initState,\r\n  action: ActionsType\r\n): InitStateType => {\r\n  switch (action.type) {\r\n    case \"registration/SET-IS-REGISTERED\": {\r\n      return { ...state, isRegistered: action.isRegistered };\r\n    }\r\n\r\n    case \"registration/SET-IS-FETCHING\": {\r\n      return { ...state, isFetching: action.isFetching };\r\n    }\r\n\r\n    case \"registration/SET-ERROR\": {\r\n      return { ...state, error: action.error };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {instance, LoginResponseType, UserDataType} from \"../login-api/loginAPI\";\r\n\r\n\r\n// api\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<LoginResponseType>(\"auth/me\", {});\r\n    },\r\n    logout() {\r\n        return instance.delete<LogoutType>(\"auth/me\", {});\r\n    },\r\n    updateUserData(data: UpdateUserDataType) {\r\n        return instance.put<UpdateUserDataResponseType>(\"auth/me\", data);\r\n    },\r\n};\r\n\r\n\r\n// types\r\nexport type LogoutType = {\r\n    info: string\r\n    error: string\r\n};\r\nexport type UpdateUserDataType = {\r\n    name: string\r\n    avatar: string\r\n};\r\ntype UpdateUserDataResponseType = {\r\n    updatedUser: UserDataType\r\n    error?: string\r\n};\r\n\r\n","import {AppRootStateType, CommonActionTypeForApp, InferActionType} from \"./store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {actionsForLogin} from \"../a1-root/v2-Login/loginReduser\";\r\nimport {authAPI} from \"../api/auth-api/authAPI\";\r\n\r\n\r\nconst initialState = {\r\n    status: \"idle\",\r\n    isInitialized: false,\r\n    error: null,\r\n} as AppInitialStateType;\r\n\r\nexport const appReducer =\r\n    (state: InitialAppStateType = initialState, action: CommonActionTypeForApp): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case \"PET-PROJECT/ROOT/APP/SET-STATUS\":\r\n            return {...state, status: action.status};\r\n        case \"PET-PROJECT/ROOT/APP/IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized};\r\n        case \"PET-PROJECT/ROOT/APP/SET-ERROR\":\r\n            return {...state, error: action.error};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n// actions\r\nexport const actionsForApp = {\r\n    setAppStatus: (status: StatusType) => ({type: \"PET-PROJECT/ROOT/APP/SET-STATUS\", status} as const),\r\n    setAppError: (error: string | null) => ({type: \"PET-PROJECT/ROOT/APP/SET-ERROR\", error} as const),\r\n    setIsInitialized: (isInitialized: boolean) => ({type: \"PET-PROJECT/ROOT/APP/IS-INITIALIZED\", isInitialized} as const),\r\n};\r\n\r\n\r\n// thunks\r\nexport const initializeApp = (): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        let res = await authAPI.me();\r\n        if (res.status === 200) {\r\n            dispatch(actionsForLogin.setIsLoggedIn(true));\r\n            dispatch(actionsForApp.setIsInitialized(true));\r\n        }\r\n    } catch (e) {\r\n        dispatch(actionsForApp.setIsInitialized(true));\r\n        dispatch(actionsForApp.setAppStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(actionsForApp.setAppError(error));\r\n    }\r\n};\r\n\r\n\r\n// types\r\nexport type InitialAppStateType = typeof initialState;\r\nexport type AppActionType = InferActionType<typeof actionsForApp>;\r\nexport type AppInitialStateType = {\r\n    status: StatusType\r\n    isInitialized: boolean\r\n    error: string | null\r\n};\r\nexport type StatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, CommonActionTypeForApp>;\r\nexport type ThunkDispatchType = ThunkDispatch<AppRootStateType, unknown, CommonActionTypeForApp>;\r\n\r\n","import {loginAPI, LoginResponseType, LoginType, UserDataType} from \"../../api/login-api/loginAPI\";\r\nimport {CommonActionTypeForApp, InferActionType} from \"../../app/store\";\r\nimport {authAPI, UpdateUserDataType} from \"../../api/auth-api/authAPI\";\r\nimport {actionsForApp, ThunkDispatchType, ThunkType} from \"../../app/appReducer\";\r\n\r\n\r\nconst initialState = {\r\n    _id: '',\r\n    avatar: '',\r\n    email: '',\r\n    isAdmin: false,\r\n    name: '',\r\n    publicCardPacksCount: 0,\r\n    rememberMe: false,\r\n    verified: false,\r\n    updated: {},\r\n    created: {},\r\n    isLoggedIn: false,\r\n} as UserDataDomainType;\r\n\r\nexport const loginReducer =\r\n    (state: InitialAuthStateType = initialState, action: CommonActionTypeForApp): InitialAuthStateType => {\r\n        switch (action.type) {\r\n            case \"PET-PROJECT/ROOT/LOGIN/SET-IS-LOGGED-IN\":\r\n                return {...state, isLoggedIn: action.value};\r\n            case \"PET-PROJECT/ROOT/LOGIN/UPDATE-USER-DATA\":\r\n                return {...state,};\r\n            case \"PET-PROJECT/ROOT/LOGIN/GET-USER\":\r\n                return {...state, name: action.data.name, avatar: action.data.avatar};\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n\r\n// actions\r\nexport const actionsForLogin = {\r\n    setIsLoggedIn: (value: boolean) => ({type: \"PET-PROJECT/ROOT/LOGIN/SET-IS-LOGGED-IN\", value} as const),\r\n    updateUserData: (data: UpdateUserDataType) => ({type: \"PET-PROJECT/ROOT/LOGIN/UPDATE-USER-DATA\", data} as const),\r\n    getUser: (data: LoginResponseType) => ({type: \"PET-PROJECT/ROOT/LOGIN/GET-USER\", data} as const),\r\n};\r\n\r\n\r\n// thunks\r\nexport const login = (data: LoginType): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        dispatch(actionsForApp.setAppStatus(\"loading\"));\r\n        let res = await loginAPI.login(data);\r\n        if (res.status === 200) {\r\n            dispatch(actionsForLogin.setIsLoggedIn(true))\r\n            dispatch(actionsForApp.setAppStatus(\"succeeded\"));\r\n            dispatch(actionsForLogin.getUser(res.data))\r\n        }\r\n    } catch (e) {\r\n        dispatch(actionsForApp.setAppStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(actionsForApp.setAppError(error))\r\n    }\r\n};\r\nexport const logout = (): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        dispatch(actionsForApp.setAppStatus(\"loading\"));\r\n        let res = await authAPI.logout();\r\n        if (res.status === 200) {\r\n            dispatch(actionsForApp.setAppStatus(\"succeeded\"));\r\n            dispatch(actionsForLogin.setIsLoggedIn(false))\r\n            dispatch(actionsForApp.setIsInitialized(true));\r\n        }\r\n    } catch (e) {\r\n        dispatch(actionsForApp.setAppStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(actionsForApp.setAppError(error))\r\n    }\r\n};\r\n\r\n\r\n// types\r\nexport type UserDataDomainType = UserDataType & { isLoggedIn: boolean };\r\nexport type InitialAuthStateType = typeof initialState;\r\nexport type LoginActionType = InferActionType<typeof actionsForLogin>;","import {instance} from \"../login-api/loginAPI\";\r\n\r\n\r\n// api\r\nexport const forgotAPI = {\r\n    forgot(data: ForgotType) {\r\n        return instance.post<ForgotResponseType>(\"auth/forgot\", data);\r\n    },\r\n    setNewPassword(data: SetType) {\r\n        return instance.post<ForgotResponseType>(\"auth/set-new-password\", data);\r\n    },\r\n};\r\n\r\n\r\n// types\r\nexport type ForgotType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n};\r\n\r\nexport type ForgotResponseType = {\r\n    info: string\r\n    error: string\r\n};\r\nexport type SetType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n};\r\n\r\n\r\n\r\n","import {CommonActionTypeForApp, InferActionType} from \"../../app/store\";\r\nimport {forgotAPI, ForgotType} from \"../../api/forgot-api/forgotAPI\";\r\nimport {ThunkDispatchType, ThunkType} from \"../../app/appReducer\";\r\n\r\nconst initialState = {\r\n    forgotPasswordError: '',\r\n    status: 'idle'\r\n} as forgotPasswordType\r\n\r\nexport const forgotPasswordReduser =\r\n    (state: forgotPasswordType = initialState, action: CommonActionTypeForApp): forgotPasswordType => {\r\n        switch (action.type) {\r\n            case \"PET-PROJECT/ROOT/FORGOT-PASSWORD/FORGOT-ERROR\":\r\n                return {...state, forgotPasswordError: action.value};\r\n                case \"PET-PROJECT/ROOT/FORGOT-PASSWORD/FORGOT-STATUS\":\r\n                return {...state, status: action.value};\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n\r\n// actions\r\nexport const actionsForPassword = {\r\n    forgotPasswordError: (value: string) => ({type: \"PET-PROJECT/ROOT/FORGOT-PASSWORD/FORGOT-ERROR\", value} as const),\r\n    forgotStatus: (value: forgotStatusType) => ({type: \"PET-PROJECT/ROOT/FORGOT-PASSWORD/FORGOT-STATUS\", value} as const),\r\n};\r\n\r\n\r\n// thunks\r\nexport const forgotPassword = (data: ForgotType): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        dispatch(actionsForPassword.forgotStatus(\"loading\"));\r\n        let res = await forgotAPI.forgot(data);\r\n        if (res.status === 200) {\r\n            dispatch(actionsForPassword.forgotStatus(\"succeeded\"));\r\n        }\r\n    } catch (e) {\r\n        dispatch(actionsForPassword.forgotStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        console.log(error)\r\n        dispatch(actionsForPassword.forgotPasswordError(error))\r\n    }\r\n};\r\n\r\n// types\r\nexport type forgotPasswordType =  {\r\n    forgotPasswordError: string\r\n    status: forgotStatusType\r\n}\r\nexport type ActionsForFogotPasswordType = InferActionType<typeof actionsForPassword>;\r\nexport type forgotStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";","import {CommonActionTypeForApp, InferActionType} from \"../../app/store\";\r\nimport {forgotAPI, SetType} from \"../../api/forgot-api/forgotAPI\";\r\nimport {actionsForApp, ThunkDispatchType, ThunkType} from \"../../app/appReducer\";\r\n\r\nconst initialState = {\r\n    setPasswordError: '',\r\n    status: 'idle'\r\n} as setPasswordType;\r\n\r\nexport const setPasswordReduser =\r\n    (state: setPasswordType = initialState, action: CommonActionTypeForApp): setPasswordType => {\r\n        switch (action.type) {\r\n            case \"PET-PROJECT/ROOT/SET-PASSWORD/SET-ERROR\":\r\n                return {...state, setPasswordError: action.value};\r\n                case \"PET-PROJECT/ROOT/SET-PASSWORD/SET-STATUS\":\r\n                return {...state, status: action.value};\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n\r\n// actions\r\nexport const actionsForSetPassword = {\r\n    setPasswordError: (value: string) => ({type: \"PET-PROJECT/ROOT/SET-PASSWORD/SET-ERROR\", value} as const),\r\n    setStatus: (value: setStatusType) => ({type: \"PET-PROJECT/ROOT/SET-PASSWORD/SET-STATUS\", value} as const),\r\n};\r\n\r\n\r\n// thunks\r\n\r\nexport const getPassword = (data: SetType): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        dispatch(actionsForApp.setAppStatus(\"loading\"));\r\n        let res = await forgotAPI.setNewPassword(data);\r\n        if (res.status === 200) {\r\n            dispatch(actionsForApp.setAppStatus(\"succeeded\"));\r\n        }\r\n    } catch (e) {\r\n        console.log(e.response)\r\n        dispatch(actionsForApp.setAppStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(actionsForSetPassword.setPasswordError(error))\r\n    }\r\n};\r\n\r\n\r\n// types\r\nexport type setPasswordType = {\r\n    setPasswordError: string\r\n    status: setStatusType\r\n};\r\nexport type ActionsForSetPasswordType = InferActionType<typeof actionsForSetPassword>;\r\nexport type setStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {mainReduser} from \"../a1-root/v1-Main/mainReduser\";\r\nimport {profileReduser} from \"../a1-root/v4-Profile/profileReduser\";\r\nimport {page404Reduser} from \"../a1-root/v5-Page_404/pag404Reduser\";\r\nimport {registrationReduser} from \"../a1-root/v3-Registration/registrationReduser\";\r\nimport {LoginActionType, loginReducer} from \"../a1-root/v2-Login/loginReduser\";\r\nimport {AppActionType, appReducer} from \"./appReducer\";\r\nimport {\r\n    ActionsForFogotPasswordType,\r\n    forgotPasswordReduser\r\n} from \"../a1-root/v6-fogotPassword/forgotPasswordReduser\";\r\nimport {ActionsForSetPasswordType, setPasswordReduser} from \"../a1-root/v7-setPassword/setPasswordReduser\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    main: mainReduser,\r\n    login: loginReducer,\r\n    registration: registrationReduser,\r\n    profile: profileReduser,\r\n    page404: page404Reduser,\r\n    forgotPassword: forgotPasswordReduser,\r\n    setPassword: setPasswordReduser\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport type CommonActionTypeForApp = LoginActionType | AppActionType | ActionsForFogotPasswordType | ActionsForSetPasswordType;\r\n\r\nexport type InferActionType<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never;\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","\r\nexport const mainReduser = (state= {}, action: any)=> {\r\n    return state\r\n}","\r\nexport const profileReduser = (state= {}, action: any)=> {\r\n    return state\r\n}","\r\nexport const page404Reduser = (state= {}, action: any)=> {\r\n    return state\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${!error ? s.superInput : s.errorInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.mainStyle} ${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n        onChangeChecked &&  onChangeChecked(e.currentTarget.checked)\r\n        onChange &&  onChange(e)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport SuperInputText from \"./common/c1-SuperInputText/SuperInputText\";\r\nimport s from \"./Main.module.css\";\r\nimport SuperButton from \"./common/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"./common/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\nfunction Main() {\r\n  const [text, setText] = useState<string>(\"\");\r\n  const error = text ? \"\" : \"error\";\r\n\r\n  const showAlert = () => {\r\n    if (error) {\r\n      alert(\"введите текст...\");\r\n    } else {\r\n      alert(text); // если нет ошибки показать текст\r\n    }\r\n  };\r\n\r\n  const [checked, setChecked] = useState<boolean>(false);\r\n  const testOnChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    setChecked(e.currentTarget.checked);\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <h1>Main</h1>\r\n\r\n      <div className={s.column}>\r\n        <SuperInputText\r\n          value={text}\r\n          onChangeText={setText}\r\n          onEnter={showAlert}\r\n          error={error}\r\n          spanClassName={s.testSpanError}\r\n        />\r\n\r\n        <SuperInputText\r\n          className={s.blue} // проверьте, рабоет ли смешивание классов\r\n        />\r\n\r\n        {/*----------------------------------------------------*/}\r\n\r\n        <SuperButton>default</SuperButton>\r\n\r\n        <SuperButton\r\n          red // пропсу с булевым значением не обязательно указывать true\r\n          onClick={showAlert}\r\n        >\r\n          delete {/*// название кнопки попадёт в children*/}\r\n        </SuperButton>\r\n\r\n        <SuperButton disabled>disabled</SuperButton>\r\n\r\n        {/*----------------------------------------------------*/}\r\n\r\n        <SuperCheckbox checked={checked} onChangeChecked={setChecked}>\r\n          some text {\"этот текст попадёт в children\"}\r\n        </SuperCheckbox>\r\n\r\n        {/*// onChange тоже должен работать*/}\r\n        <SuperCheckbox checked={checked} onChange={testOnChange} />\r\n      </div>\r\n\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React, {FormEvent, FocusEvent, useState} from \"react\";\r\nimport style from \"./Login.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {login} from \"./loginReduser\";\r\nimport {StatusType} from \"../../app/appReducer\";\r\n\r\n\r\nexport const Login: React.FC = React.memo(() => {\r\n\r\n    const [data, setData] = useState({email: '', password: '', rememberMe: false});\r\n    const [errors, setErrors] = useState({\r\n        emailValid: false,\r\n        passwordValid: false,\r\n        formErrors: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n    });\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn);\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status);\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n\r\n    const validate = (e: FocusEvent<HTMLInputElement>) => {\r\n        debugger\r\n        switch (e.currentTarget.type) {\r\n            case \"email\":\r\n                if (!e.currentTarget.value) {\r\n                    setErrors({...errors, emailValid: true, formErrors: {...errors.formErrors, email: \"Required\"}});\r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(e.currentTarget.value)) {\r\n                    setErrors({...errors, emailValid: true, formErrors: {...errors.formErrors, email: \"Invalid email address\"}});\r\n                }\r\n                break;\r\n            case \"password\":\r\n                if (!e.currentTarget.value) {\r\n                    setErrors({\r\n                        ...errors,\r\n                        passwordValid: true,\r\n                        formErrors: {...errors.formErrors, password: \"Required\"},\r\n                    });\r\n                } else if (e.currentTarget.value.length < 6) {\r\n                    setErrors({\r\n                        ...errors,\r\n                        passwordValid: true,\r\n                        formErrors: {...errors.formErrors, password: \"Invalid password, minimum length 6 characters\"},\r\n                    });\r\n                } else if (e.currentTarget.value.length > 16) {\r\n                    setErrors({\r\n                        ...errors,\r\n                        passwordValid: true,\r\n                        formErrors: {...errors.formErrors,\r\n                            password: \"Invalid password, maximum length 16 characters\"},\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        dispatch(login(data));\r\n        e.preventDefault();\r\n    };\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PET_PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <label htmlFor=\"email\" aria-required={true}>Email</label>\r\n                <input\r\n                    onBlur={(e) => validate(e)}\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    value={data.email}\r\n                    onChange={\r\n                        (e) => setData({...data, email: e.target.value})\r\n                    }\r\n                />\r\n                {errors.emailValid ? <div style={{color: \"red\"}}>{errors.formErrors.email}</div> : null}\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input\r\n                    onBlur={(e) => validate(e)}\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    value={data.password}\r\n                    onChange={\r\n                        (e) => setData({...data, password: e.target.value})\r\n                    }\r\n                />\r\n                {errors.passwordValid ? <div style={{color: \"red\"}}>{errors.formErrors.password}</div> : null}\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"rememberMe\">rememberMe</label>\r\n                <input\r\n                    type=\"checkBox\"\r\n                    id=\"checkBox\"\r\n                    checked={data.rememberMe}\r\n                    onChange={\r\n                        (e) => setData({...data, rememberMe: e.target.checked})\r\n                    }\r\n                />\r\n            </div>\r\n            <button type={\"submit\"} disabled={status === \"loading\"}>Login</button>\r\n            <span style={{color: \"red\"}}>{ error ? error : null }</span>\r\n        </form>\r\n    );\r\n})\r\n","import React from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {UserDataDomainType} from \"../v2-Login/loginReduser\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\n\r\nexport const Profile: React.FC = React.memo(() => {\r\n\r\n    const user = useSelector<AppRootStateType, UserDataDomainType>(state => state.login)\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.PET_LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.App}>\r\n            <h1>{user.name}</h1>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport style from \"./Registration.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { registerTC, setRegistrationErrorAC } from \"./registrationReduser\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nfunction Registration() {\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(setRegistrationErrorAC(\"\"));\r\n    };\r\n  }, []);\r\n\r\n  const isRegistered = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.registration.isRegistered\r\n  );\r\n  const isFetching = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.registration.isFetching\r\n  );\r\n  const error = useSelector<AppRootStateType, string>(\r\n    (state) => state.registration.error\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmedPassword, setConfirmedPassword] = useState(\"\");\r\n\r\n  const history = useHistory();\r\n\r\n  const onEmailChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setEmail(e.currentTarget.value);\r\n    dispatch(setRegistrationErrorAC(\"\"));\r\n  };\r\n  const onPasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setPassword(e.currentTarget.value);\r\n    dispatch(setRegistrationErrorAC(\"\"));\r\n  };\r\n  const onConfirmedPasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setConfirmedPassword(e.currentTarget.value);\r\n    dispatch(setRegistrationErrorAC(\"\"));\r\n  };\r\n  const onCancelBtnClick = () => history.push(PATH.PET_LOGIN);\r\n  const onRegisterBtnClick = () => {\r\n    if (\r\n      email &&\r\n      password &&\r\n      confirmedPassword &&\r\n      password === confirmedPassword\r\n    ) {\r\n      dispatch(registerTC(email, confirmedPassword));\r\n    } else {\r\n      dispatch(setRegistrationErrorAC(\"not valid email/password /ᐠ-ꞈ-ᐟ\\\\\"));\r\n    }\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n    setConfirmedPassword(\"\");\r\n  };\r\n\r\n  if (!isRegistered) {\r\n    return (\r\n      <div className={style.mainDiv}>\r\n        <h1 className={style.header}>Registration</h1>\r\n\r\n        <div className={style.form}>\r\n          <div className={style.error}>{error}</div>\r\n\r\n          <div className={style.formField}>\r\n            <div>Email</div>\r\n            <input\r\n              type={\"email\"}\r\n              value={email}\r\n              disabled={isFetching}\r\n              onChange={onEmailChange}\r\n            />\r\n          </div>\r\n\r\n          <div className={style.formField}>\r\n            <div>Password</div>\r\n            <input\r\n              type={\"password\"}\r\n              value={password}\r\n              disabled={isFetching}\r\n              onChange={onPasswordChange}\r\n            />\r\n          </div>\r\n\r\n          <div className={style.formField}>\r\n            <div>Confirm password</div>\r\n            <input\r\n              type={\"password\"}\r\n              value={confirmedPassword}\r\n              disabled={isFetching}\r\n              onChange={onConfirmedPasswordChange}\r\n            />\r\n          </div>\r\n\r\n          <button\r\n            onClick={onCancelBtnClick}\r\n            disabled={isFetching}\r\n            className={style.cancelBtn}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={onRegisterBtnClick}\r\n            disabled={isFetching}\r\n            className={style.registerBtn}\r\n          >\r\n            Register\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Redirect to={PATH.PET_LOGIN} />;\r\n  }\r\n}\r\n\r\nexport default Registration;\r\n","import React from 'react';\r\nimport style from './Page_404.module.css'\r\n\r\nfunction Page404() {\r\n  return (\r\n    <div className={style.App}>\r\n      <h1>Page 404</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page404;\r\n","export default __webpack_public_path__ + \"static/media/preloader.ba1ee69b.gif\";","import React, {FormEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {Dispatch} from 'redux';\r\nimport {PATH} from '../../app/App';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {actionsForPassword, forgotPassword, forgotStatusType} from \"./forgotPasswordReduser\";\r\nimport preloader from \"../../image/preloader.gif\";\r\n\r\n\r\nexport const ForgotPassword: React.FC = React.memo(() => {\r\n\r\n    const [data, setData] = useState({\r\n        email: '',\r\n        from: 'test-front-admin <ai73a@yandex.by>',\r\n        message: `<div style=\"background-color: lime; padding: 15px;\">\r\n  <a href='lismgmk.github.io/My_pet_project/#/set-password/$token$'>\r\n  Password recower link\r\n  </a></div>`\r\n    });\r\n\r\n    const status = useSelector<AppRootStateType, forgotStatusType>(state => state.forgotPassword.status)\r\n    const error = useSelector<AppRootStateType, string>(state => state.forgotPassword.forgotPasswordError);\r\n\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        dispatch(forgotPassword(data));\r\n        e.preventDefault();\r\n    };\r\n    if (status === \"succeeded\") {\r\n\r\n        dispatch(actionsForPassword.forgotPasswordError(''))\r\n        return <Redirect to={{\r\n            pathname: PATH.PET_CHECK_EMAIL,\r\n            state: {email: data.email}\r\n        }}\r\n        />\r\n    }\r\n    if (status === \"loading\") {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <img src={preloader} alt=\"\"/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>It-incubator</h2>\r\n            <h3>Forgot your password?</h3>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        value={data.email}\r\n                        placeholder='Email'\r\n                        onChange={\r\n                            (e) => setData({...data, email: e.target.value})\r\n                        }\r\n                    />\r\n                    <label htmlFor=\"email\">Enter your email address and we will send you further instructions </label>\r\n                </div>\r\n                <button type={\"submit\"}>Send Instructions</button>\r\n                <span style={{color: \"red\"}}>{error ? error : null}</span>\r\n            </form>\r\n            <NavLink to={PATH.PET_LOGIN}>Did you remember your password?</NavLink>\r\n        </div>\r\n\r\n    );\r\n})\r\n","import React from 'react';\r\nimport {useLocation} from \"react-router\";\r\n\r\nexport const CheckEmail: React.FC = React.memo(() => {\r\n\r\n    const location = useLocation()\r\n// @ts-ignore\r\n    let mail = location.state.email\r\n\r\n    return (\r\n      <div>\r\n          <h2>It-incubator</h2>\r\n          <h3>Check Email</h3>\r\n          <div>{`We’ve sent an Email with instructions to ${mail}`}</div>\r\n      </div>\r\n\r\n  );\r\n})\r\n","import React, {FormEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {Dispatch} from 'redux';\r\nimport {PATH} from '../../app/App';\r\nimport {StatusType} from '../../app/appReducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport preloader from \"../../image/preloader.gif\";\r\nimport {actionsForSetPassword, getPassword} from \"./setPasswordReduser\";\r\n\r\n\r\nexport const SetPassword: React.FC = React.memo(() => {\r\n\r\n    const [data, setData] = useState({\r\n        password: '',\r\n        resetPasswordToken: ''\r\n    });\r\n\r\n    const status = useSelector<AppRootStateType,StatusType>(state => state.setPassword.status);\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.setPassword.setPasswordError);\r\n\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        dispatch(getPassword(data))\r\n\r\n    };\r\n    const {token} = useParams<{ token: string }>();\r\n\r\n    if (status === \"succeeded\") {\r\n        dispatch(actionsForSetPassword.setPasswordError(''))\r\n        return <Redirect to={PATH.PET_LOGIN}/>\r\n    }\r\n    if (status === \"loading\") {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <img src={preloader} alt=\"\"/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>It-incubator</h2>\r\n            <h3>Create new password</h3>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        value={data.password}\r\n                        placeholder='password'\r\n                        onChange={\r\n                            (e) => setData({resetPasswordToken: token, password: e.target.value})\r\n                        }\r\n                    />\r\n                </div>\r\n                <button type={\"submit\"}>Create new password</button>\r\n                <span style={{color: \"red\"}}>{error ? error : null}</span>\r\n            </form>\r\n\r\n        </div>\r\n\r\n    );\r\n})","import React, {FormEvent, useEffect} from \"react\";\r\nimport {Switch, Route, Redirect, NavLink} from \"react-router-dom\";\r\nimport {Dispatch} from \"redux\";\r\nimport style from \"./App.module.css\";\r\nimport Main from \"../a1-root/v1-Main/Main\";\r\nimport {Login} from \"../a1-root/v2-Login/Login\";\r\nimport {Profile} from \"../a1-root/v4-Profile/Profile\";\r\nimport Registration from \"../a1-root/v3-Registration/Registration\";\r\nimport Page404 from \"../a1-root/v5-Page_404/Page404\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppInitialStateType, initializeApp} from \"./appReducer\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport preloader from \"../image/preloader.gif\";\r\nimport {logout} from \"../a1-root/v2-Login/loginReduser\";\r\nimport {ForgotPassword} from \"../a1-root/v6-fogotPassword/ForgotPassword\";\r\nimport {CheckEmail} from \"../a1-root/v6-fogotPassword/CheckEmail\";\r\nimport {SetPassword} from \"../a1-root/v7-setPassword/SetPassword\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const appState = useSelector<AppRootStateType, AppInitialStateType>(state => state.app);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn);\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        dispatch(logout())\r\n        e.preventDefault()\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div\r\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                <img src={preloader} alt=\"\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                appState.status === \"loading\"\r\n                && <div\r\n                    style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                    <img src={preloader} alt=\"\"/>\r\n                </div>\r\n            }\r\n            <div className={style.App}>\r\n                <NavLink to={PATH.PET_MAIN} activeClassName={style.activeLink}>Main</NavLink>\r\n                {\r\n                    isLoggedIn\r\n                        ? <form onSubmit={handleSubmit}>\r\n                            <button type={\"submit\"} disabled={appState.status === \"loading\"}>Logout</button>\r\n                        </form>\r\n                        : <NavLink to={PATH.PET_LOGIN} activeClassName={style.activeLink}>Login</NavLink>\r\n                }\r\n                <NavLink to={PATH.PET_REGISTRATION} activeClassName={style.activeLink}>Registration</NavLink>\r\n                <NavLink to={PATH.PET_PROFILE} activeClassName={style.activeLink}>Profile</NavLink>\r\n                <NavLink to={PATH.PET_PAGE404} activeClassName={style.activeLink}>Page_404</NavLink>\r\n                <NavLink to={PATH.PET_FORGOT_PASSWORD} activeClassName={style.activeLink}>Forgot_password</NavLink>\r\n                <NavLink to={PATH.PET_SET_PASSWORD} activeClassName={style.activeLink}>Set_password</NavLink>\r\n            </div>\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.PET_MAIN}/>}/>\r\n\r\n\r\n                <Route exact path={PATH.PET_MAIN} render={() => <Main/>}/>\r\n                <Route exact path={PATH.PET_LOGIN} render={() => <Login/>}/>\r\n                <Route exact path={PATH.PET_REGISTRATION} render={() => <Registration/>}/>\r\n                <Route exact path={PATH.PET_PROFILE} render={() => <Profile/>}/>\r\n                <Route exact path={PATH.PET_PAGE404} render={() => <Page404/>}/>\r\n                <Route exact path={PATH.PET_FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\r\n                <Route  path={PATH.PET_SET_PASSWORD } render={() => <SetPassword/>}/>\r\n                <Route exact path={PATH.PET_CHECK_EMAIL} render={() => <CheckEmail/>}/>\r\n\r\n                <Redirect from={'*'} to={PATH.PET_PAGE404}/>\r\n            </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\nexport const PATH = {\r\n    PET_MAIN: '/main',\r\n    PET_LOGIN: '/login',\r\n    PET_REGISTRATION: '/registration',\r\n    PET_PROFILE: '/profile',\r\n    PET_PAGE404: '/page404',\r\n    PET_FORGOT_PASSWORD: '/forgot-password',\r\n    PET_SET_PASSWORD: '/set-password',\r\n    PET_CHECK_EMAIL: '/check-email',\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter >\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}