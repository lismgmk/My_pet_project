{"version":3,"sources":["app/App.module.css","a1-root/v1-Main/common/c1-SuperInputText/SuperInputText.module.css","a1-root/v1-Main/Main.module.css","a1-root/v1-Main/common/c2-SuperButton/SuperButton.module.css","a1-root/v1-Main/common/c3-SuperCheckbox/SuperCheckbox.module.css","a1-root/v4-Profile/Profile.module.css","a1-root/v3-Registration/Registration.module.css","a1-root/v5-Page_404/Page_404.module.css","reportWebVitals.ts","api/login-api/loginAPI.ts","api/auth-api/authAPI.ts","app/appReducer.ts","a1-root/v2-Login/loginReduser.ts","api/forgot-api/forgotAPI.ts","a1-root/v6-fogotPassword/forgotPasswordReduser.ts","app/store.ts","a1-root/v1-Main/mainReduser.ts","a1-root/v3-Registration/registrationReduser.ts","a1-root/v4-Profile/profileReduser.ts","a1-root/v5-Page_404/pag404Reduser.ts","a1-root/v1-Main/common/c1-SuperInputText/SuperInputText.tsx","a1-root/v1-Main/common/c2-SuperButton/SuperButton.tsx","a1-root/v1-Main/common/c3-SuperCheckbox/SuperCheckbox.tsx","a1-root/v1-Main/Main.tsx","a1-root/v2-Login/Login.tsx","a1-root/v4-Profile/Profile.tsx","a1-root/v3-Registration/Registration.tsx","a1-root/v5-Page_404/Page404.tsx","image/preloader.gif","a1-root/v6-fogotPassword/ForgotPassword.tsx","a1-root/v6-fogotPassword/CheckEmail.tsx","a1-root/v7-setPassword/SetPassword.tsx","app/App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","loginAPI","data","post","authAPI","delete","initialState","status","isInitialized","error","actionsForApp","type","_id","avatar","email","isAdmin","name","publicCardPacksCount","rememberMe","verified","updated","created","isLoggedIn","actionsForLogin","setIsLoggedIn","value","updateUserData","getUser","forgotAPI","forgotPasswordError","actionsForPassword","rootReducer","combineReducers","app","state","action","main","login","registration","profile","page404","forgotPassword","store","createStore","applyMiddleware","thunk","window","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","className","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","input","errorInput","superInput","e","currentTarget","key","SuperButton","red","finalClassName","mainStyle","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","Main","useState","text","setText","showAlert","alert","setChecked","column","testSpanError","blue","onClick","disabled","Login","React","memo","password","setData","useSelector","dispatch","useDispatch","to","PATH","PET_PROFILE","onSubmit","a","res","response","message","preventDefault","htmlFor","id","target","style","color","Profile","user","App","PET_LOGIN","Registration","Page404","ForgotPassword","from","pathname","PET_CHECK_EMAIL","position","top","textAlign","width","src","preloader","alt","console","log","placeholder","CheckEmail","mail","useLocation","SetPassword","resetPasswordToken","token","useParams","getPassword","appState","useEffect","PET_MAIN","activeClassName","activeLink","PET_REGISTRATION","PET_PAGE404","PET_FORGOT_PASSWORD","PET_SET_PASSWORD","path","PET_NULL","exact","render","PET","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1b5462e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__12Ubl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__1cquU\",\"errorInput\":\"SuperInputText_errorInput__1IAjT\",\"error\":\"SuperInputText_error__3SMj9\",\"input\":\"SuperInputText_input__1W_3A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"Main_blue__tmsj9\",\"column\":\"Main_column__2K_xq\",\"testSpanError\":\"Main_testSpanError__2grtX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1Px0N\",\"mainStyle\":\"SuperButton_mainStyle__31Ag_\",\"move\":\"SuperButton_move__1BYrb\",\"red\":\"SuperButton_red__2cwi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__3NkIC\",\"spanClassName\":\"SuperCheckbox_spanClassName__3K4kp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Profile_App__2bOOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Registration_App__1_Fb9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Page_404_App__3qaEl\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\n\r\n\r\n// instance\r\nexport const instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    // baseURL: \"http://localhost:7542/2.0/\",\r\n    withCredentials: true,\r\n});\r\n\r\n\r\n// api\r\nexport const loginAPI = {\r\n    login(data: LoginType) {\r\n        return instance.post<LoginResponseType>(\"auth/login\", data);\r\n    },\r\n};\r\n\r\n\r\n// types\r\nexport type LoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n};\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n};\r\ntype ErrorType = { error?: string };\r\nexport type LoginResponseType = UserDataType & ErrorType;","import {instance, LoginResponseType, UserDataType} from \"../login-api/loginAPI\";\r\n\r\n\r\n// api\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<LoginResponseType>(\"auth/me\", {});\r\n    },\r\n    logout() {\r\n        return instance.delete<LogoutType>(\"auth/me\", {});\r\n    },\r\n    updateUserData(data: UpdateUserDataType) {\r\n        return instance.put<UpdateUserDataResponseType>(\"auth/me\", data);\r\n    },\r\n};\r\n\r\n\r\n// types\r\nexport type LogoutType = {\r\n    info: string\r\n    error: string\r\n};\r\nexport type UpdateUserDataType = {\r\n    name: string\r\n    avatar: string\r\n};\r\ntype UpdateUserDataResponseType = {\r\n    updatedUser: UserDataType\r\n    error?: string\r\n};\r\n\r\n","import {AppRootStateType, CommonActionTypeForApp, InferActionType} from \"./store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {actionsForLogin} from \"../a1-root/v2-Login/loginReduser\";\r\nimport {authAPI} from \"../api/auth-api/authAPI\";\r\n\r\n\r\nconst initialState = {\r\n    status: \"idle\",\r\n    isInitialized: false,\r\n    error: null,\r\n} as AppInitialStateType;\r\n\r\nexport const appReducer =\r\n    (state: InitialAppStateType = initialState, action: CommonActionTypeForApp): InitialAppStateType => {\r\n    switch (action.type) {\r\n        case \"PET-PROJECT/ROOT/APP/SET-STATUS\":\r\n            return {...state, status: action.status};\r\n        case \"PET-PROJECT/ROOT/APP/IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized};\r\n        case \"PET-PROJECT/ROOT/APP/SET-ERROR\":\r\n            return {...state, error: action.error};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n// actions\r\nexport const actionsForApp = {\r\n    setAppStatus: (status: StatusType) => ({type: \"PET-PROJECT/ROOT/APP/SET-STATUS\", status} as const),\r\n    setAppError: (error: string | null) => ({type: \"PET-PROJECT/ROOT/APP/SET-ERROR\", error} as const),\r\n    setIsInitialized: (isInitialized: boolean) => ({type: \"PET-PROJECT/ROOT/APP/IS-INITIALIZED\", isInitialized} as const),\r\n};\r\n\r\n\r\n// thunks\r\nexport const initializeApp = (): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        let res = await authAPI.me();\r\n        if (res.status === 200) {\r\n            dispatch(actionsForLogin.setIsLoggedIn(true));\r\n            dispatch(actionsForApp.setIsInitialized(true));\r\n        }\r\n    } catch (e) {\r\n        dispatch(actionsForApp.setIsInitialized(true));\r\n        dispatch(actionsForApp.setAppStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(actionsForApp.setAppError(error));\r\n    }\r\n};\r\n\r\n\r\n// types\r\nexport type InitialAppStateType = typeof initialState;\r\nexport type AppActionType = InferActionType<typeof actionsForApp>;\r\nexport type AppInitialStateType = {\r\n    status: StatusType\r\n    isInitialized: boolean\r\n    error: string | null\r\n};\r\nexport type StatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, CommonActionTypeForApp>;\r\nexport type ThunkDispatchType = ThunkDispatch<AppRootStateType, unknown, CommonActionTypeForApp>;\r\n\r\n","import {loginAPI, LoginResponseType, LoginType, UserDataType} from \"../../api/login-api/loginAPI\";\r\nimport {CommonActionTypeForApp, InferActionType} from \"../../app/store\";\r\nimport {authAPI, UpdateUserDataType} from \"../../api/auth-api/authAPI\";\r\nimport {actionsForApp, ThunkDispatchType, ThunkType} from \"../../app/appReducer\";\r\n\r\n\r\nconst initialState = {\r\n    _id: '',\r\n    avatar: '',\r\n    email: '',\r\n    isAdmin: false,\r\n    name: '',\r\n    publicCardPacksCount: 0,\r\n    rememberMe: false,\r\n    verified: false,\r\n    updated: {},\r\n    created: {},\r\n    isLoggedIn: false,\r\n} as UserDataDomainType;\r\n\r\nexport const loginReducer =\r\n    (state: InitialAuthStateType = initialState, action: CommonActionTypeForApp): InitialAuthStateType => {\r\n        switch (action.type) {\r\n            case \"PET-PROJECT/ROOT/LOGIN/SET-IS-LOGGED-IN\":\r\n                return {...state, isLoggedIn: action.value};\r\n            case \"PET-PROJECT/ROOT/LOGIN/UPDATE-USER-DATA\":\r\n                return {...state,};\r\n            case \"PET-PROJECT/ROOT/LOGIN/GET-USER\":\r\n                return {...state, name: action.data.name, avatar: action.data.avatar};\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n\r\n// actions\r\nexport const actionsForLogin = {\r\n    setIsLoggedIn: (value: boolean) => ({type: \"PET-PROJECT/ROOT/LOGIN/SET-IS-LOGGED-IN\", value} as const),\r\n    updateUserData: (data: UpdateUserDataType) => ({type: \"PET-PROJECT/ROOT/LOGIN/UPDATE-USER-DATA\", data} as const),\r\n    getUser: (data: LoginResponseType) => ({type: \"PET-PROJECT/ROOT/LOGIN/GET-USER\", data} as const),\r\n};\r\n\r\n\r\n// thunks\r\nexport const login = (data: LoginType): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        dispatch(actionsForApp.setAppStatus(\"loading\"));\r\n        let res = await loginAPI.login(data);\r\n        if (res.status === 200) {\r\n            dispatch(actionsForLogin.setIsLoggedIn(true))\r\n            dispatch(actionsForApp.setAppStatus(\"succeeded\"));\r\n            dispatch(actionsForLogin.getUser(res.data))\r\n        }\r\n    } catch (e) {\r\n        dispatch(actionsForApp.setAppStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(actionsForApp.setAppError(error))\r\n    }\r\n};\r\nexport const logout = (): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        dispatch(actionsForApp.setAppStatus(\"loading\"));\r\n        let res = await authAPI.logout();\r\n        if (res.status === 200) {\r\n            dispatch(actionsForApp.setAppStatus(\"succeeded\"));\r\n            dispatch(actionsForLogin.setIsLoggedIn(false))\r\n            dispatch(actionsForApp.setIsInitialized(true));\r\n        }\r\n    } catch (e) {\r\n        dispatch(actionsForApp.setAppStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(actionsForApp.setAppError(error))\r\n    }\r\n};\r\n\r\n\r\n// types\r\nexport type UserDataDomainType = UserDataType & { isLoggedIn: boolean };\r\nexport type InitialAuthStateType = typeof initialState;\r\nexport type LoginActionType = InferActionType<typeof actionsForLogin>;","import {instance} from \"../login-api/loginAPI\";\r\n\r\n\r\n// api\r\nexport const forgotAPI = {\r\n    forgot(data: ForgotType) {\r\n        return instance.post<ForgotResponseType>(\"auth/forgot\", data);\r\n    },\r\n    setNewPassword(data: SetType) {\r\n        return instance.post<ForgotResponseType>(\"auth/set-new-password\", data);\r\n    },\r\n};\r\n\r\n\r\n// types\r\nexport type ForgotType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n};\r\n\r\nexport type ForgotResponseType = {\r\n    info: string\r\n    error: string\r\n};\r\nexport type SetType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n};\r\n\r\n\r\n\r\n","import {CommonActionTypeForApp, InferActionType} from \"../../app/store\";\r\nimport {forgotAPI, ForgotType, SetType} from \"../../api/forgot-api/forgotAPI\";\r\nimport {actionsForApp, ThunkDispatchType, ThunkType} from \"../../app/appReducer\";\r\n\r\nconst initialState = {\r\n    forgotPasswordError: ''\r\n};\r\n\r\nexport const forgotPasswordReduser =\r\n    (state: forgotPasswordType = initialState, action: CommonActionTypeForApp): forgotPasswordType => {\r\n        switch (action.type) {\r\n            case \"PET-PROJECT/ROOT/FORGOT-PASSWORD/FORGOT-ERROR\":\r\n                return {...state, forgotPasswordError: action.value};\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n\r\n// actions\r\nexport const actionsForPassword = {\r\n    forgotPasswordError: (value: string) => ({type: \"PET-PROJECT/ROOT/FORGOT-PASSWORD/FORGOT-ERROR\", value} as const),\r\n};\r\n\r\n\r\n// thunks\r\nexport const forgotPassword = (data: ForgotType): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        dispatch(actionsForApp.setAppStatus(\"loading\"));\r\n        let res = await forgotAPI.forgot(data);\r\n        if (res.status === 200) {\r\n            dispatch(actionsForApp.setAppStatus(\"succeeded\"));\r\n        }\r\n    } catch (e) {\r\n        dispatch(actionsForApp.setAppStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        console.log(error)\r\n        dispatch(actionsForPassword.forgotPasswordError(error))\r\n    }\r\n};\r\n\r\n\r\nexport const getPassword = (data: SetType): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        dispatch(actionsForApp.setAppStatus(\"loading\"));\r\n        let res = await forgotAPI.setNewPassword(data);\r\n        if (res.status === 200) {\r\n            dispatch(actionsForApp.setAppStatus(\"succeeded\"));\r\n        }\r\n    } catch (e) {\r\n        console.log(e.response)\r\n        dispatch(actionsForApp.setAppStatus(\"failed\"));\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(actionsForPassword.forgotPasswordError(error))\r\n    }\r\n};\r\n\r\n\r\n// types\r\nexport type forgotPasswordType = typeof initialState;\r\nexport type ActionsForLoginType = InferActionType<typeof actionsForPassword>;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {mainReduser} from \"../a1-root/v1-Main/mainReduser\";\r\nimport {profileReduser} from \"../a1-root/v4-Profile/profileReduser\";\r\nimport {page404Reduser} from \"../a1-root/v5-Page_404/pag404Reduser\";\r\nimport {registrationReduser} from \"../a1-root/v3-Registration/registrationReduser\";\r\nimport {LoginActionType, loginReducer} from \"../a1-root/v2-Login/loginReduser\";\r\nimport {AppActionType, appReducer} from \"./appReducer\";\r\nimport {ActionsForLoginType, forgotPasswordReduser} from \"../a1-root/v6-fogotPassword/forgotPasswordReduser\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    main: mainReduser,\r\n    login: loginReducer,\r\n    registration: registrationReduser,\r\n    profile: profileReduser,\r\n    page404: page404Reduser,\r\n    forgotPassword: forgotPasswordReduser\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport type CommonActionTypeForApp = LoginActionType | AppActionType | ActionsForLoginType;\r\n\r\nexport type InferActionType<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never;\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","\r\nexport const mainReduser = (state= {}, action: any)=> {\r\n    return state\r\n}","\r\nexport const registrationReduser = (state= {}, action: any)=> {\r\n    return state\r\n}","\r\nexport const profileReduser = (state= {}, action: any)=> {\r\n    return state\r\n}","\r\nexport const page404Reduser = (state= {}, action: any)=> {\r\n    return state\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${!error ? s.superInput : s.errorInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.mainStyle} ${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n        onChangeChecked &&  onChangeChecked(e.currentTarget.checked)\r\n        onChange &&  onChange(e)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport SuperInputText from './common/c1-SuperInputText/SuperInputText'\r\nimport s from './Main.module.css'\r\nimport SuperButton from './common/c2-SuperButton/SuperButton'\r\nimport SuperCheckbox from './common/c3-SuperCheckbox/SuperCheckbox'\r\n\r\nfunction Main() {\r\n    const [text, setText] = useState<string>('')\r\n    const error = text ? '' : 'error'\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert('введите текст...')\r\n        } else {\r\n            alert(text) // если нет ошибки показать текст\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(false)\r\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked)\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n           <h1>Main</h1>\r\n\r\n            <div className={s.column}>\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                    spanClassName={s.testSpanError}\r\n                />\r\n\r\n                <SuperInputText\r\n                    className={s.blue} // проверьте, рабоет ли смешивание классов\r\n                />\r\n\r\n                {/*----------------------------------------------------*/}\r\n\r\n                <SuperButton>\r\n                    default\r\n                </SuperButton>\r\n\r\n                <SuperButton\r\n                    red // пропсу с булевым значением не обязательно указывать true\r\n                    onClick={showAlert}\r\n                >\r\n                    delete {/*// название кнопки попадёт в children*/}\r\n                </SuperButton>\r\n\r\n                <SuperButton disabled>\r\n                    disabled\r\n                </SuperButton>\r\n\r\n                {/*----------------------------------------------------*/}\r\n\r\n                <SuperCheckbox\r\n                    checked={checked}\r\n                    onChangeChecked={setChecked}\r\n                >\r\n                    some text {'этот текст попадёт в children'}\r\n                </SuperCheckbox>\r\n\r\n                {/*// onChange тоже должен работать*/}\r\n                <SuperCheckbox checked={checked} onChange={testOnChange}/>\r\n            </div>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeSuperInputText/>*/}\r\n            {/*<AlternativeSuperButton/>*/}\r\n            {/*<AlternativeSuperCheckbox/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React, {FormEvent, useState} from \"react\";\r\nimport style from \"./Login.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {PATH} from \"../../app/App\";\r\nimport {login} from \"./loginReduser\";\r\nimport {StatusType} from \"../../app/appReducer\";\r\n\r\n\r\nexport const Login: React.FC = React.memo(() => {\r\n\r\n    const [data, setData] = useState({email: '', password: '', rememberMe: false});\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn);\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status);\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        dispatch(login(data));\r\n        e.preventDefault();\r\n    };\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PET_PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    value={data.email}\r\n                    onChange={\r\n                        (e) => setData({...data, email: e.target.value})\r\n                    }\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    value={data.password}\r\n                    onChange={\r\n                        (e) => setData({...data, password: e.target.value})\r\n                    }\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"rememberMe\">rememberMe</label>\r\n                <input\r\n                    type=\"checkBox\"\r\n                    id=\"checkBox\"\r\n                    checked={data.rememberMe}\r\n                    onChange={\r\n                        (e) => setData({...data, rememberMe: e.target.checked})\r\n                    }\r\n                />\r\n            </div>\r\n            <button type={\"submit\"} disabled={status === \"loading\"}>Login</button>\r\n            <span style={{color: \"red\"}}>{ error ? error : null }</span>\r\n        </form>\r\n    );\r\n})\r\n","import React from \"react\";\r\nimport style from \"./Profile.module.css\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {UserDataDomainType} from \"../v2-Login/loginReduser\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../app/App\";\r\n\r\n\r\nexport const Profile: React.FC = React.memo(() => {\r\n\r\n    const user = useSelector<AppRootStateType, UserDataDomainType>(state => state.login)\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.PET_LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.App}>\r\n            <h1>{user.name}</h1>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import React from 'react';\r\nimport style from './Registration.module.css'\r\n\r\nfunction Registration() {\r\n  return (\r\n    <div className={style.App}>\r\n      <h1>Registration</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Registration;\r\n","import React from 'react';\r\nimport style from './Page_404.module.css'\r\n\r\nfunction Page404() {\r\n  return (\r\n    <div className={style.App}>\r\n      <h1>Page 404</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page404;\r\n","export default __webpack_public_path__ + \"static/media/preloader.ba1ee69b.gif\";","import React, {FormEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {Dispatch} from 'redux';\r\nimport {PATH} from '../../app/App';\r\nimport {actionsForApp, StatusType} from '../../app/appReducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {actionsForPassword, forgotPassword} from \"./forgotPasswordReduser\";\r\nimport preloader from \"../../image/preloader.gif\";\r\n\r\n\r\nexport const ForgotPassword: React.FC = React.memo(() => {\r\n\r\n    const [data, setData] = useState({\r\n        email: '',\r\n        from: 'test-front-admin <ai73a@yandex.by>',\r\n        message: `<div style=\"background-color: lime; padding: 15px;\">\r\n  <a href='https://lismgmk.github.io/My-Pet-Project/set-password/$token$'>\r\n  password recower link\r\n  </a></div>`\r\n    });\r\n\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status)\r\n    const error = useSelector<AppRootStateType, string>(state => state.forgotPassword.forgotPasswordError);\r\n\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        dispatch(forgotPassword(data));\r\n        e.preventDefault();\r\n    };\r\n    if (status === \"succeeded\") {\r\n        dispatch(actionsForPassword.forgotPasswordError(''))\r\n        dispatch(actionsForApp.setAppStatus('idle'))\r\n        return <Redirect to={{\r\n            pathname: PATH.PET_CHECK_EMAIL,\r\n            state: {email: data.email}\r\n        }}\r\n        />\r\n    }\r\n    if (status === \"loading\") {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <img src={preloader} alt=\"\"/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>It-incubator</h2>\r\n            <h3>Forgot your password?</h3>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        value={data.email}\r\n                        placeholder='Email'\r\n                        onChange={\r\n                            (e) => setData({...data, email: e.target.value})\r\n                        }\r\n                    />\r\n                    <label htmlFor=\"email\">Enter your email address and we will send you further instructions </label>\r\n                </div>\r\n                <button type={\"submit\"}>Send Instructions</button>\r\n                <span style={{color: \"red\"}}>{error ? error : null}</span>\r\n            </form>\r\n            <NavLink to={PATH.PET_LOGIN}>Did you remember your password?</NavLink>\r\n        </div>\r\n\r\n    );\r\n})\r\n","import React from 'react';\r\nimport {useLocation} from \"react-router\";\r\n\r\nexport const CheckEmail: React.FC = React.memo(() => {\r\n\r\n    const location = useLocation()\r\n// @ts-ignore\r\n    let mail = location.state.email\r\n\r\n    return (\r\n      <div>\r\n          <h2>It-incubator</h2>\r\n          <h3>Check Email</h3>\r\n          <div>{`We’ve sent an Email with instructions to ${mail}`}</div>\r\n      </div>\r\n\r\n  );\r\n})\r\n","import React, {FormEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {Dispatch} from 'redux';\r\nimport {PATH} from '../../app/App';\r\nimport {actionsForApp, StatusType} from '../../app/appReducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {actionsForPassword, getPassword} from \"../v6-fogotPassword/forgotPasswordReduser\";\r\nimport preloader from \"../../image/preloader.gif\";\r\n\r\n\r\nexport const SetPassword: React.FC = React.memo(() => {\r\n\r\n    const [data, setData] = useState({\r\n        password: '',\r\n        resetPasswordToken: ''\r\n    });\r\n\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.forgotPassword.forgotPasswordError);\r\n\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        dispatch(getPassword(data))\r\n\r\n    };\r\n    const {token} = useParams<{ token: string }>();\r\n\r\n    if (status === \"succeeded\") {\r\n        dispatch(actionsForPassword.forgotPasswordError(''))\r\n        dispatch(actionsForApp.setAppStatus('idle'))\r\n        return <Redirect to={PATH.PET_LOGIN}/>\r\n    }\r\n    if (status === \"loading\") {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <img src={preloader} alt=\"\"/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>It-incubator</h2>\r\n            <h3>Create new password</h3>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        value={data.password}\r\n                        placeholder='password'\r\n                        onChange={\r\n                            (e) => setData({resetPasswordToken: token, password: e.target.value})\r\n                        }\r\n                    />\r\n                </div>\r\n                <button type={\"submit\"}>Create new password</button>\r\n                <span style={{color: \"red\"}}>{error ? error : null}</span>\r\n            </form>\r\n\r\n        </div>\r\n\r\n    );\r\n})","import React, {FormEvent, useEffect} from \"react\";\r\nimport {Switch, Route, Redirect, NavLink} from \"react-router-dom\";\r\nimport {Dispatch} from \"redux\";\r\nimport style from \"./App.module.css\";\r\nimport Main from \"../a1-root/v1-Main/Main\";\r\nimport {Login} from \"../a1-root/v2-Login/Login\";\r\nimport {Profile} from \"../a1-root/v4-Profile/Profile\";\r\nimport Registration from \"../a1-root/v3-Registration/Registration\";\r\nimport Page404 from \"../a1-root/v5-Page_404/Page404\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppInitialStateType, initializeApp} from \"./appReducer\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport preloader from \"../image/preloader.gif\";\r\nimport {logout} from \"../a1-root/v2-Login/loginReduser\";\r\nimport {ForgotPassword} from \"../a1-root/v6-fogotPassword/ForgotPassword\";\r\nimport {CheckEmail} from \"../a1-root/v6-fogotPassword/CheckEmail\";\r\nimport {SetPassword} from \"../a1-root/v7-setPassword/SetPassword\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const appState = useSelector<AppRootStateType, AppInitialStateType>(state => state.app);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn);\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\r\n        dispatch(logout())\r\n        e.preventDefault()\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div\r\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                <img src={preloader} alt=\"\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                appState.status === \"loading\"\r\n                && <div\r\n                    style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                    <img src={preloader} alt=\"\"/>\r\n                </div>\r\n            }\r\n            <div className={style.App}>\r\n                <NavLink to={PATH.PET_MAIN} activeClassName={style.activeLink}>Main</NavLink>\r\n                {\r\n                    isLoggedIn\r\n                        ? <form onSubmit={handleSubmit}>\r\n                            <button type={\"submit\"} disabled={appState.status === \"loading\"}>Logout</button>\r\n                        </form>\r\n                        : <NavLink to={PATH.PET_LOGIN} activeClassName={style.activeLink}>Login</NavLink>\r\n                }\r\n                <NavLink to={PATH.PET_REGISTRATION} activeClassName={style.activeLink}>Registration</NavLink>\r\n                <NavLink to={PATH.PET_PROFILE} activeClassName={style.activeLink}>Profile</NavLink>\r\n                <NavLink to={PATH.PET_PAGE404} activeClassName={style.activeLink}>Page_404</NavLink>\r\n                <NavLink to={PATH.PET_FORGOT_PASSWORD} activeClassName={style.activeLink}>Forgot_password</NavLink>\r\n                <NavLink to={PATH.PET_SET_PASSWORD} activeClassName={style.activeLink}>Set_password</NavLink>\r\n            </div>\r\n            <Switch>\r\n                <Route path={PATH.PET_NULL} exact render={() => <Redirect to={PATH.PET_MAIN}/>}/>\r\n\r\n                <Route exact path={PATH.PET_MAIN} render={() => <Main/>}/>\r\n                <Route exact path={PATH.PET_LOGIN} render={() => <Login/>}/>\r\n                <Route exact path={PATH.PET_REGISTRATION} render={() => <Registration/>}/>\r\n                <Route exact path={PATH.PET_PROFILE} render={() => <Profile/>}/>\r\n                <Route exact path={PATH.PET_PAGE404} render={() => <Page404/>}/>\r\n                <Route exact path={PATH.PET_FORGOT_PASSWORD} render={() => <ForgotPassword/>}/>\r\n                <Route  path={PATH.PET_SET_PASSWORD } render={() => <SetPassword/>}/>\r\n                <Route exact path={PATH.PET_CHECK_EMAIL} render={() => <CheckEmail/>}/>\r\n\r\n                <Redirect from={'*'} to={PATH.PET_PAGE404}/>\r\n            </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\nexport const PATH = {\r\n    PET: '/',\r\n    PET_MAIN: '/My-pet-project/main',\r\n    PET_LOGIN: '/My-pet-project/login',\r\n    PET_REGISTRATION: '/My-pet-project/registration',\r\n    PET_PROFILE: '/My-pet-project/profile',\r\n    PET_PAGE404: '/My-pet-project/page404',\r\n    PET_FORGOT_PASSWORD: '/My-pet-project/forgot-password',\r\n    PET_SET_PASSWORD: '/My-pet-project/set-password/:token',\r\n    PET_CHECK_EMAIL: '/My-pet-project/check-email',\r\n    PET_NULL: '/'\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}